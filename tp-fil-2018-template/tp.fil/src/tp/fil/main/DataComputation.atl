-- @nsURI Java=http://www.eclipse.org/MoDisco/Java/0.2.incubation/java
-- @path Data=/tp.fil/src/tp/fil/resources/Data.ecore

module DataComputation;
create OUT : Data from IN : Java;

rule Model2Model {
	from 
		s : Java!Package(s.name = 'model' and not s.proxy)
	to
		t : Data!Model(
			class <- s.ownedElements ->select (d | d.oclIsTypeOf(Java!ClassDeclaration))
										-> collect(cd | thisModule.ClassDeclaration2Class(cd))
		)
}

lazy rule ClassDeclaration2Class {
	from
		s : Java!ClassDeclaration
	to
		t : Data!Class(
			name <- s.name,
			attributes <- s.bodyDeclarations->select(bd | bd.oclIsTypeOf(Java!FieldDeclaration))
												->collect(fd | thisModule.FieldDeclaration2Attribute(fd)),
			methods <- s.bodyDeclarations->select(cd | cd.oclIsTypeOf(Java!MethodDeclaration))
											->collect(md | thisModule.MethodDeclaration2Method(md))
		)
}

lazy rule FieldDeclaration2Attribute {
	from
		s : Java!FieldDeclaration
	to
		t : Data!Attribute(
			name <- s.fragments.first().name,
			type <- s.type.type.name,
			encapsulation <- s.modifier.visibility.toString()
		)
}

lazy rule MethodDeclaration2Method {
	from 
		s : Java!MethodDeclaration
	to 
		t : Data!Method(
			name <- s.name,
			return <- s.returnType.type.name,
			Parameters <- s.parameters ->select(ed | ed.oclIsTypeOf(Java!SingleVariableDeclaration))
											->collect(pd | thisModule.Parameter2Parameter(pd)),
			encapsulation <- s.modifier.visibility.toString()
		)
}

lazy rule Parameter2Parameter {
	from 
		s : Java!SingleVariableDeclaration
	to 
		t : Data!Parameter(
			name <- s.name
		)
}